blueprint:
  name: Dim Up and Down Light with Rotational Control
  description: >
    Dim up and dim down a light with specified steps based on device rotation events.
  domain: automation
  input:
    light_entity:
      name: Light Entity
      description: The light entity to control
      selector:
        entity:
          domain: light
    rotate_device:
      name: Rotate Device
      description: Device ID of the rotating device
      selector:
        device:

    dim_step:
      name: Dim Step
      description: The amount of brightness to change per step (0-255)
      default: 51
      selector:
        number:
          min: 1
          max: 255
          unit_of_measurement: brightness
          mode: slider

variables:
  light_entity: !input light_entity
  dim_step: !input dim_step

trigger:
  - platform: device
    device_id: !input rotate_device
    domain: zha
    type: device_rotated

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.subtype == 'right' }}"
        sequence:
          - service: light.turn_on
            data_template:
              entity_id: !input light_entity
              brightness: >
                {% set current_brightness = state_attr(light_entity, 'brightness') | int %}
                {% if current_brightness is none %}
                  {{ dim_step }}
                {% else %}
                  {% set new_brightness = current_brightness + dim_step %}
                  {{ new_brightness if new_brightness <= 255 else 255 }}
                {% endif %}

      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.subtype == 'left' }}"
        sequence:
          - service: light.turn_on
            data_template:
              entity_id: !input light_entity
              brightness: >
                {% set current_brightness = state_attr(light_entity, 'brightness') | int %}
                {% if current_brightness is none or current_brightness == 0 %}
                  0
                {% else %}
                  {% set new_brightness = current_brightness - dim_step %}
                  {{ new_brightness if new_brightness >= 0 else 0 }}
                {% endif %}
          - condition: template
            value_template: "{{ trigger.event.data.subtype == 'left' and state_attr(light_entity, 'brightness') == 0 }}"
            sequence:
              - service: light.turn_off
                data:
                  entity_id: !input light_entity
